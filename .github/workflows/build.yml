name: Create and Publish Release

on:
  workflow_dispatch:  # Trigger the workflow manually from the GitHub UI

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Setup Git
      run: |
        git config --global user.name "${{ github.actor }}"
        git config --global user.email "${{ github.actor }}@users.noreply.github.com"

    - name: Determine version tag
      id: get_version
      run: |
        # Fetch all tags
        git fetch --tags

        # Get the latest tag or default to v0.0.0 if no tags exist
        latest_tag=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
        echo "latest_tag=$latest_tag" >> $GITHUB_ENV

        # Check if it's the first release (no previous tag)
        if [ "${latest_tag}" = "v0.0.0" ]; then
          # First release, use v1.0.0 and versionCode 1000
          new_version="v1.0.0"
          new_version_code=1000
        else
          # Increment version from the latest tag
          IFS='.' read -r -a version_parts <<< "${latest_tag#v}"
          version_parts[2]=$((version_parts[2] + 1))  # Increment patch version
          new_version="v${version_parts[0]}.${version_parts[1]}.${version_parts[2]}"
          new_version_code=$(( $(jq '.versionCode' update.json) + 1 ))  # Increment versionCode
        fi

        echo "new_version=$new_version" >> $GITHUB_ENV
        echo "new_version_code=$new_version_code" >> $GITHUB_ENV
        echo "New version: $new_version, versionCode: $new_version_code"

    - name: Update update.json with new version, versionCode, and zipUrl
      run: |
        # Define the new zip URL based on the new version
        zip_url="https://github.com/TheBizarreAbhishek/F23_Feature_Enhancer/releases/download/${{ env.new_version }}/F23_Feature_Enhancer.zip"
        
        # Update the update.json file with the new version, versionCode, and zipUrl
        echo "Updating update.json with version ${{ env.new_version }}, versionCode ${{ env.new_version_code }} and zipUrl $zip_url"
        
        jq --arg new_version "${{ env.new_version }}" --arg zip_url "$zip_url" --argjson new_version_code "${{ env.new_version_code }}" \
          '.version = $new_version | .versionCode = $new_version_code | .zipUrl = $zip_url' update.json > tmp.json && mv tmp.json update.json
        cat update.json  # Optional: Print the updated JSON to verify

    - name: Commit changes to update.json
      run: |
        git add update.json
        git commit -m "Update update.json with version ${{ env.new_version }} and versionCode ${{ env.new_version_code }}"
        git push origin main

    - name: Update module.prop with new version and versionCode
      run: |
        # Update version and versionCode in module.prop
        echo "Updating module.prop with version ${{ env.new_version }} and versionCode ${{ env.new_version_code }}"
        
        sed -i "s/^version=.*/version=${{ env.new_version }}/" module.prop
        sed -i "s/^versionCode=.*/versionCode=${{ env.new_version_code }}/" module.prop
        
        cat module.prop  # Optional: Print the updated module.prop to verify

    - name: Commit changes to module.prop
      run: |
        git add module.prop
        git commit -m "Update module.prop with version ${{ env.new_version }} and versionCode ${{ env.new_version_code }}"
        git push origin main

    - name: Create ZIP of module
      run: |
        zip_name="F23_Feature_Enhancer-${{ env.new_version }}.zip"
        zip -r "$zip_name" . -x ".git*" ".github*" "$zip_name"
        echo "zip_name=$zip_name" >> $GITHUB_ENV
        echo "Created $zip_name"

    - name: Create Git tag
      run: |
        git tag ${{ env.new_version }}
        git push origin ${{ env.new_version }}

    - name: Create GitHub release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ env.new_version }}
        release_name: "F23_Feature_Enhancer-${{ env.new_version }}"  # Set the release title based on the tag
        body: "This is the release for version ${{ env.new_version }}."
        files: ${{ env.zip_name }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
