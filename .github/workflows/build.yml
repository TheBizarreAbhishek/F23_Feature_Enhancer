name: Build and Release

on:
  workflow_dispatch:
  
jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v2

    - name: Set up JDK (if needed)
      uses: actions/setup-java@v2
      with:
        java-version: '11'
        distribution: 'adoptopenjdk'

    - name: Set Version and VersionCode
      id: set_version
      run: |
        # Get latest tag
        latest_tag=$(git describe --tags --abbrev=0)
        latest_version=$(echo $latest_tag | sed 's/v//')
        version_code=$((${latest_version//./} * 1000))

        # Set new version and versionCode
        new_version="v$((${latest_version%%.*} + 1)).$((${latest_version#*.} + 1)).0"
        new_version_code=$((version_code + 1))

        echo "New Version: $new_version"
        echo "New VersionCode: $new_version_code"

        echo "::set-output name=new_version::$new_version"
        echo "::set-output name=new_version_code::$new_version_code"

    - name: Check if version needs updating
      id: check_version
      run: |
        # Read current version and versionCode from module.prop and update.json
        current_version=$(grep '^version=' module.prop | cut -d'=' -f2)
        current_version_code=$(grep '^versionCode=' module.prop | cut -d'=' -f2)
        
        current_update_version=$(jq -r '.version' update.json)
        current_update_version_code=$(jq -r '.versionCode' update.json)

        if [[ "$current_version" != "${{ steps.set_version.outputs.new_version }}" ]] || [[ "$current_version_code" != "${{ steps.set_version.outputs.new_version_code }}" ]]; then
          echo "Version needs to be updated"
          echo "::set-output name=update_required::true"
        else
          echo "No version update needed"
          echo "::set-output name=update_required::false"
        fi

    - name: Update version and versionCode
      if: steps.check_version.outputs.update_required == 'true'
      run: |
        # Update module.prop
        sed -i "s/^version=.*/version=${{ steps.set_version.outputs.new_version }}/" module.prop
        sed -i "s/^versionCode=.*/versionCode=${{ steps.set_version.outputs.new_version_code }}/" module.prop

        # Update update.json
        jq ".version = \"${{ steps.set_version.outputs.new_version }}\" | .versionCode = ${{
          steps.set_version.outputs.new_version_code }}" update.json > temp.json && mv temp.json update.json

        # Commit the changes
        git add module.prop update.json
        git commit -m "Update version to ${{ steps.set_version.outputs.new_version }} and versionCode to ${{ steps.set_version.outputs.new_version_code }}"
        git push origin main

    - name: Create a release
      run: |
        # Create the release zip file
        zip -r F23_Feature_Enhancer-${{ steps.set_version.outputs.new_version }}.zip .

        # Upload the release asset
        gh release create ${{ steps.set_version.outputs.new_version }} F23_Feature_Enhancer-${{ steps.set_version.outputs.new_version }}.zip --title "Release ${{ steps.set_version.outputs.new_version }}" --notes "New release"
